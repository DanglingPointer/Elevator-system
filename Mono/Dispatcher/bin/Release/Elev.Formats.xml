<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Elev.Formats</name>
    </assembly>
    <members>
        <member name="T:Elev.Formats.State">
            <summary>
            Struct representing an elevator's state
            </summary>
        </member>
        <member name="M:Elev.Formats.State.#ctor(Elev.Formats.Direction,System.Int32)">
            <summary/>
            <param name="dirn">Current direction of motion</param>
            <param name="lastFloor">Last floor passed by the elevator. -1 if EmergencyStop'ed</param>
        </member>
        <member name="F:Elev.Formats.State.dirn">
            <summary>
            Current direction of motion
            </summary>
        </member>
        <member name="F:Elev.Formats.State.lastFloor">
            <summary>
            Last floor passed by the elevator. -1 if EmergencyStop'ed
            </summary>
        </member>
        <member name="T:Elev.Formats.Order">
            <summary>
            Struct containing information about an internal or external order
            </summary>
        </member>
        <member name="M:Elev.Formats.Order.#ctor(Elev.Formats.Direction,System.Int32)">
            <summary/>
            <param name="dirn"> Where the client wants to move </param>
            <param name="destFloor"> From where the order is received </param>
        </member>
        <member name="F:Elev.Formats.Order.dirn">
            <summary>
            Where the client wants to move
            </summary>
        </member>
        <member name="F:Elev.Formats.Order.destFloor">
            <summary>
            From where the order is received
            </summary>
        </member>
        <member name="T:Elev.Formats.Datagram">
            <summary>
            Protocol of the data exchange between the Dispatcher and Elevators
            </summary>
        </member>
        <member name="F:Elev.Formats.Datagram.MsgType.Status">
            <summary> Content is an object of type State </summary>
        </member>
        <member name="F:Elev.Formats.Datagram.MsgType.Order">
            <summary> Content is an object of type Order </summary>
        </member>
        <member name="F:Elev.Formats.Datagram.MsgType.Served">
            <summary> Content is Order (floor that has been served) </summary>
        </member>
        <member name="F:Elev.Formats.Datagram.MsgType.ToServe">
            <summary> Content is order </summary>
        </member>
        <member name="F:Elev.Formats.Datagram.MsgType.Dummy">
            <summary> Checks connection, content is null </summary>
        </member>
        <member name="P:Elev.Formats.Datagram.Type">
            <summary>
            Type of the message to be sent
            </summary>
        </member>
        <member name="P:Elev.Formats.Datagram.Content">
            <summary>
            Message content
            </summary>
        </member>
        <member name="M:Elev.Formats.Datagram.CreateOrder(Elev.Formats.Order)">
            <summary>
            Order to be sent from an elevator when registered, and from
            the dispatcher to notify all elevators
            </summary>
        </member>
        <member name="M:Elev.Formats.Datagram.CreateStatus(Elev.Formats.State)">
            <summary>
            Status update to be sent from an elevator to the dispatcher
            </summary>
        </member>
        <member name="M:Elev.Formats.Datagram.CreateServed(Elev.Formats.Order)">
            <summary>
            Order served message to be sent from either side in order
            to synchronize floor button lights and order queues
            </summary>
            <param name="order">Floor that has now been served</param>
        </member>
        <member name="M:Elev.Formats.Datagram.CreateToServe(Elev.Formats.Order)">
            <summary>
            Sent from dispatcher to elevator when an order is assigned to this elevator
            </summary>
            <param name="order">Order to be served by an elevator</param>
        </member>
        <member name="M:Elev.Formats.Datagram.CreateDummy">
            <summary>
            Sent from both dispatcher and elevator to check the connection. Necessary
            because Mono implementation of NetworkStream.Read() doesn't throw a shit
            </summary>
        </member>
        <member name="T:Elev.Formats.NetSerializer`1">
            <summary>
            Wrapper around NetworkStream that converts a specified datatype 
            to datagrams and sends via TCP. 
            </summary>
            <typeparam name="T"> Type to be serialized. Must be marked 
            with DataContractAttribute </typeparam>
        </member>
        <member name="M:Elev.Formats.NetSerializer`1.#ctor(System.Net.Sockets.NetworkStream,System.Object)">
            <summary>
            Creates NetSerializer that will read/write to the specified tcp stream
            </summary>
        </member>
        <member name="P:Elev.Formats.NetSerializer`1.TcpStream">
            <summary>
            The tcp stream we are writing to
            </summary>
        </member>
        <member name="M:Elev.Formats.NetSerializer`1.WriteToStream(`0)">
            <summary>
            Sends an object to the tcp stream
            </summary>
            <param name="obj"> Object to be sent </param>
        </member>
        <member name="M:Elev.Formats.NetSerializer`1.ExtractFromStream">
            <summary>
            Extracts one object from the stream, blocks when no objects available or
            throws IOException if ReadTimeOut is set
            </summary>
        </member>
        <member name="M:Elev.Formats.NetSerializer`1.ReadXmlObject">
            <summary> 
            Extracts first xml-object from the tcp stream, blocks
            </summary>
        </member>
        <member name="T:Elev.Formats.LogWriter">
            <summary>
            Maintains a binary log file
            </summary>
        </member>
        <member name="M:Elev.Formats.LogWriter.#ctor(System.String)">
            <summary>
            Creates a log writer that writes to a file with the given name
            </summary>
            <param name="fileName">File name without extension</param>
        </member>
        <member name="M:Elev.Formats.LogWriter.#ctor">
            <summary>
            Creates a log writer that writes to a file with the default name
            </summary>
        </member>
        <member name="M:Elev.Formats.LogWriter.WriteToLog(Elev.Formats.Order[])">
            <summary>
            Appends one or more Order objects to the log file. Creates new log if 
            the log file does not exist
            </summary>
            <param name="dataArr"> Data to be written into the log file </param>
        </member>
        <member name="M:Elev.Formats.LogWriter.RewriteLog(Elev.Formats.Order[])">
            <summary>
            Erases and rewrites the whole log file
            </summary>
        </member>
        <member name="M:Elev.Formats.LogWriter.GetOrderData">
            <summary>
            Read the whole log to an array of Orders
            </summary>
            <returns> Data read from the log, or an array of zero length
            if the log does not exist </returns>
        </member>
    </members>
</doc>
